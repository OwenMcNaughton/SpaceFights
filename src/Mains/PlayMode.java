package Mains;import java.io.FileNotFoundException;import java.io.IOException;import java.io.UnsupportedEncodingException;import java.util.Random;import org.lwjgl.input.Mouse;import org.newdawn.slick.Animation;import org.newdawn.slick.Color;
import org.newdawn.slick.GameContainer;
import org.newdawn.slick.Graphics;
import org.newdawn.slick.Image;import org.newdawn.slick.Input;
import org.newdawn.slick.SlickException;import org.newdawn.slick.SpriteSheet;
import org.newdawn.slick.geom.Circle;import org.newdawn.slick.geom.Point;
import org.newdawn.slick.geom.Rectangle;
import org.newdawn.slick.openal.Audio;import org.newdawn.slick.openal.AudioLoader;import org.newdawn.slick.state.BasicGameState;
import org.newdawn.slick.state.StateBasedGame;
import org.newdawn.slick.util.ResourceLoader;import celestialbodies.SystemHolder;import editmode.Crew;import editmode.Grid;import editmode.Ship;

public class PlayMode extends BasicGameState{ 
		public GameContainer gcBig;	public StateBasedGame bigsbg;	
	public static boolean firstRun;
	static Ship s;
	public static Rectangle worldClip;	public static Rectangle moonClip;
	Point worldCenter;
	Point deltaPos;
	Rectangle editClip;	Rectangle menuClip;
	
	String deltaStr;	String planetStr;		public static SystemHolder[] systems;	int highestPlanets;	SpriteSheet systemSheet;	public static SpriteSheet starSheet;	public static SpriteSheet planetSheet;	public static SpriteSheet botSheet;	public static SpriteSheet projectileSheet;		public static int systemFocus;	int planetFocus;		public static double titanium, maxtit;	public static double uranium, maxura;	public static double fuel, maxfue;	public static double gold, maxgol;	
	public static Image resourceBox;	public static Image resourceBoxSmall;	public static Image shieldBox;	public static Image warpBox;	public int warpOn;		public static Audio moonCapture;	public static Audio shieldHit;		public int startx;	public int starty;		public boolean menuLocked;		Buffon[] buffons;	Image[] buffonImages;		public static Animation reticule;	
	public PlayMode(int playState) {
		
	}
	
	public void init(GameContainer gc, StateBasedGame sbg) throws SlickException {		PlayMode.starSheet = new SpriteSheet(new org.newdawn.slick.Image("res//starSheet.png"),256,256);		PlayMode.planetSheet = new SpriteSheet(new org.newdawn.slick.Image("res//planetSheet.png"),64,64);		PlayMode.botSheet = new SpriteSheet(new org.newdawn.slick.Image("res//botSheet.png"),32,32);		PlayMode.projectileSheet = new SpriteSheet(new org.newdawn.slick.Image("res//projectileSheet.png"),8,8);				PlayMode.titanium = 111500;		PlayMode.uranium = 11300;		PlayMode.fuel = 111000;		PlayMode.gold = 11200;				try {			moonCapture = AudioLoader.getAudio("WAV", ResourceLoader.getResourceAsStream("res//moonCapture.wav"));			shieldHit = AudioLoader.getAudio("WAV", ResourceLoader.getResourceAsStream("res//shieldHit.wav"));		} catch (IOException e) {}		
		firstRun = true;		menuLocked = false;				menuClip = new Rectangle(gc.getWidth()/2f, 0, 50, gc.getHeight());
		worldClip = new Rectangle(0, 0, menuClip.getX(), gc.getHeight());		editClip = new Rectangle(menuClip.getX()+menuClip.getWidth(), 0, 				gc.getWidth()-menuClip.getMinX()+menuClip.getWidth(), gc.getHeight());						moonClip = new Rectangle(0, 0,  menuClip.getX(), gc.getHeight()); moonClip.grow(200, 200);		moonClip.setCenterX(worldClip.getCenterX()); moonClip.setCenterY(worldClip.getCenterY());				highestPlanets = 0;		planetFocus = -1;
		
		worldCenter = new Point(100, 100);
		
		deltaStr = "0";		planetStr = "0";
	
		Random gen = new Random();
		systems = new SystemHolder[10000];
		for(int i = 0; i != systems.length; i++) {
			systems[i] = new SystemHolder(gen.nextInt(5000), gen.nextInt(5000), PlayMode.worldClip);
		}
		systemSheet = new SpriteSheet(new org.newdawn.slick.Image("res//SystemSheet.png"), 16, 16);
		systemFocus = -1;				resourceBox = new org.newdawn.slick.Image("res//resourceBox.png");		resourceBoxSmall = new org.newdawn.slick.Image("res//resourceBoxSmall.png");		shieldBox = new org.newdawn.slick.Image("res//shieldBox.png");		warpBox = new org.newdawn.slick.Image("res//warpBox.png");		warpOn = -1;						buffons = new Buffon[100];		buffonImages = new Image[100];		buffonImages[0] = new org.newdawn.slick.Image("res//0.png");		buffonImages[1] = new org.newdawn.slick.Image("res//1.png");		buffonImages[2] = new org.newdawn.slick.Image("res//2.png");		buffonImages[3] = new org.newdawn.slick.Image("res//3.png");		buffonImages[4] = new org.newdawn.slick.Image("res//4.png");		buffonImages[5] = new org.newdawn.slick.Image("res//5.png");		buffonImages[6] = new org.newdawn.slick.Image("res//6.png");		buffonImages[7] = new org.newdawn.slick.Image("res//7.png");		buffonImages[8] = new org.newdawn.slick.Image("res//8.png");		buffonImages[9] = new org.newdawn.slick.Image("res//9.png");		for(int i = 0; i != 5; i++) {			buffons[i] = new Buffon((int)menuClip.getX()+i*10, 0, buffonImages[i].getWidth(), 							buffonImages[i].getHeight(), buffonImages[i], "" + i);		}		for(int i = 5; i != 10; i++) {			buffons[i] = new Buffon((int)menuClip.getX()+(i-5)*10, 10, buffonImages[i].getWidth(), 							buffonImages[i].getHeight(), buffonImages[i], "" + i);		}				reticule = new Animation(botSheet, 0, 7, 7, 7, true, 60, false);
			
	}
	
	public void render(GameContainer gc, StateBasedGame sbg, Graphics g) throws SlickException {		Input input = gc.getInput();				//g.draw(editClip);		//g.draw(worldClip);		//g.setColor(new Color(250, 0, 0));		//g.draw(menuClip);				//long start = System.nanoTime();		g.setFont(EditMode.calibri12);
		g.setWorldClip(editClip);
		s.editDraw(g, false, input);
		g.clearWorldClip();
		
		g.setWorldClip(worldClip);
		if(systemFocus == -1) {
			systemSheet.startUse();			for(SystemHolder sh : systems) {				if(sh.bounds.intersects(worldClip)) {					if(sh.system == null) {						systemSheet.renderInUse((int)sh.locx, (int)sh.locy, 0, 0);					} else {						if(sh.system.planets.length > 90) {							systemSheet.renderInUse((int)sh.locx, (int)sh.locy, 2, 0);						} else {							systemSheet.renderInUse((int)sh.locx, (int)sh.locy, 1, 0);						}												systemSheet.endUse();						g.setColor(new Color(255, 255, 255));						g.drawString("" + sh.system.planets.length, (float)sh.locx+15, (float)sh.locy);						g.drawString("" + sh.system.star.name, (float)sh.locx+15, (float)sh.locy);						systemSheet.startUse();						if(sh.system.planets.length > highestPlanets) {							highestPlanets = sh.system.planets.length;						}					}				}			}			systemSheet.endUse();		} else {			systems[systemFocus].draw(g);		}		s.playDraw(g);				if(warpOn != -1) {			warpBox.draw((float)Ship.locx-60, (float)Ship.locy-60);			g.drawString("" + systems[warpOn].system.star.name, (float)Ship.locx-40 , (float)Ship.locy-46);		}		
		g.clearWorldClip();				g.setWorldClip(menuClip);		g.drawImage(resourceBox, menuClip.getX(), 				menuClip.getY()+menuClip.getHeight()-resourceBox.getHeight());		g.setColor(new Color(255, 255, 255));		g.drawString((int)titanium + "", menuClip.getX() + 17,							   menuClip.getY()+menuClip.getHeight()-resourceBox.getHeight());		g.drawString((int)uranium + "", menuClip.getX() + 17,				menuClip.getY()+menuClip.getHeight()-resourceBox.getHeight()+24);		g.drawString((int)fuel + "", menuClip.getX() + 17,				menuClip.getY()+menuClip.getHeight()-resourceBox.getHeight()+48);		g.drawString((int)gold + "", menuClip.getX() + 17,				menuClip.getY()+menuClip.getHeight()-resourceBox.getHeight()+72);				g.drawString("/ " + (int)maxtit, menuClip.getX() + 9,				    menuClip.getY()+menuClip.getHeight()-resourceBox.getHeight()+12);		g.drawString("/ " + (int)maxura, menuClip.getX() + 9,					menuClip.getY()+menuClip.getHeight()-resourceBox.getHeight()+36);		g.drawString("/ " + (int)maxfue, menuClip.getX() + 9,					menuClip.getY()+menuClip.getHeight()-resourceBox.getHeight()+60);		g.drawString("/ " + (int)maxgol, menuClip.getX() + 9,					menuClip.getY()+menuClip.getHeight()-resourceBox.getHeight()+84);				g.drawImage(shieldBox, menuClip.getX(), 				menuClip.getY()+menuClip.getHeight()-resourceBox.getHeight()-shieldBox.getHeight());		g.drawString("Shields", menuClip.getX() + 4,			    menuClip.getY()+menuClip.getHeight()-resourceBox.getHeight()-shieldBox.getHeight()+5);		g.drawString((int)Ship.shields + "", menuClip.getX() + 14,			    menuClip.getY()+menuClip.getHeight()-resourceBox.getHeight()-shieldBox.getHeight()+20);				drawShieldBars(g);				g.setColor(new Color(255, 255, 255));		g.drawImage(shieldBox, menuClip.getX(), 				menuClip.getY()+menuClip.getHeight()-resourceBox.getHeight()-shieldBox.getHeight()*2);		g.drawString("Power", menuClip.getX() + 8,			    menuClip.getY()+menuClip.getHeight()-resourceBox.getHeight()-shieldBox.getHeight()*2+5);		drawPowerBar(g);				for(int i = 0; i != buffons.length; i++) {			if(buffons[i] != null) {				g = buffons[i].draw(g);			}		}					g.clearWorldClip();
		
		g.drawString(deltaStr, 100, 10);		g.drawString(planetStr, 120, 10);				g.draw(Ship.bounds);		g.draw(Ship.radius);		g.draw(Ship.largeRadius);		g.setColor(new Color(0, 0, 250));		g.draw(Ship.tractorRadius);				//System.out.println(System.nanoTime() - start);
	}		public Graphics drawShieldBars(Graphics g) {		int alpha = 0;		Color fill = new Color(255, 201, 62, alpha);		int yoffset = 110;		for(int i = 0; i != 10; i++) {			if(Ship.shieldsPercent > 10*i) {				if(Ship.shieldsPercent >= 10*(i+1)) {					fill = new Color(255, 201, 62, 255);				} else {					alpha = (Ship.shieldsPercent%10)*28;					fill = new Color(255, 201, 62, alpha);				}				g.setColor(fill);				g.fillRect(menuClip.getX() + 12, menuClip.getY()+menuClip.getHeight()							-resourceBox.getHeight()-shieldBox.getHeight()+yoffset, 26, 8);				yoffset -= 8;			} else {				break;			}		}				g.setLineWidth(1);		yoffset = 110;		for(int i = 0; i != 10; i++) {			if(Ship.shieldsPercent > 10*i) {				if(Ship.shieldsPercent >= 10*(i+1)) {					fill = new Color(240, 240, 240, 255);				} else {					alpha = (Ship.shieldsPercent%10)*28;					fill = new Color(240, 240, 240, alpha);				}				g.setColor(new Color(fill));				g.drawRect(menuClip.getX() + 12, menuClip.getY()+menuClip.getHeight()						-resourceBox.getHeight()-shieldBox.getHeight()+yoffset, 25, 7);								yoffset -= 8;			}		}				return g;	}		public Graphics drawPowerBar(Graphics g) {		g.setColor(new Color(120, 120, 250));		g.fillRect(menuClip.getX() + 12, menuClip.getY()+menuClip.getHeight()				-resourceBox.getHeight()-shieldBox.getHeight()-8, 26f, 				(float)-(Ship.powerTotal/Ship.powerTheoretical)*80);				g.drawString("" + (int)Ship.powerRemaining, menuClip.getX()+12, 				menuClip.getY()+menuClip.getHeight()-resourceBox.getHeight()-shieldBox.getHeight()*2+18);				g.setColor(new Color(250, 120, 120));		g.fillRect(menuClip.getX() + 12, menuClip.getY()+menuClip.getHeight()				-resourceBox.getHeight()-shieldBox.getHeight()-8, 26f, 				(float)-((Ship.powerTotal-Ship.powerRemaining)/Ship.powerTheoretical)*80);		int yoffset = 110;				g.setColor(new Color(255, 255, 255));		for(int i = 0; i != 10; i++) {			g.drawRect(menuClip.getX() + 12, menuClip.getY()+menuClip.getHeight()					-resourceBox.getHeight()-shieldBox.getHeight()*2+yoffset, 25, 7);			yoffset -= 8;		}				return g;	}		
	
	public void update(GameContainer gc, StateBasedGame sbg, int delta) throws SlickException {		bigsbg = sbg;		//long start = System.nanoTime();		gcBig = gc;		Input input = gcBig.getInput();
		if(input.isKeyDown(Input.KEY_RALT)) {
			firstRun = true;
			sbg.enterState(0);			Ship.grid.playFocus = new Point(-1, -1);
		} else if(firstRun) {
			s = EditMode.s;			if(Ship.picify()) {				Ship.grid.relocateCrew();
				firstRun = false;			} else {				firstRun = true;				sbg.enterState(0);				Ship.grid.playFocus = new Point(-1, -1);				return;			}
		} 				for(int i = 0; i != buffons.length; i++) {			if(buffons[i] != null) {				buffonHit(buffons[i].hit(input.getMouseX(), input.getMouseY()), input);			}		}				s.path();		Ship.grid.playUpdate(delta, input);		Ship.playUpdate(delta);
		
		deltaStr = "" + delta;
		
		if(input.isMouseButtonDown(1)) {
			int newx = input.getMouseX(); 
			int newy = input.getMouseY();
			if(newx > worldClip.getX() && newx < worldClip.getY() + worldClip.getWidth()) {
				if(newy > worldClip.getY() && newy < worldClip.getY() + worldClip.getHeight()) {
					s.rotate(newx, newy);
				}
			}
		}				if(input.isKeyDown(Input.KEY_W) || input.isKeyDown(Input.KEY_S)) {			Ship.planetLocked = -1;		}				if(Ship.planetLocked == -1) {
			if(input.isKeyDown(Input.KEY_W)) {
				s.accelerate('w', delta);
			} else {
				//s.accelerate('t', delta);
			}
			if(input.isKeyDown(Input.KEY_D)) {
				if(Ship.img.getRotation() +.3f > 360) {
					Ship.img.setRotation(.2f);
				} else {
					Ship.img.rotate(+.3f*delta);
				}
				Ship.angle = Ship.img.getRotation();
			}
			if(input.isKeyDown(Input.KEY_S)) {
				s.accelerate('s', delta);
			}
			if(input.isKeyDown(Input.KEY_A)) {
				if(Ship.img.getRotation() -.3f < 0) {
					Ship.img.setRotation(359.8f);
				} else {
					Ship.img.rotate(-.3f*delta);
				}
				Ship.angle = Ship.img.getRotation();
			}		} else {			if(systemFocus != -1) {				s.accelerate('o', delta);				Ship.targx = systems[systemFocus].system.planets[Ship.planetLocked].bounds.getCenterX();				Ship.targy = systems[systemFocus].system.planets[Ship.planetLocked].bounds.getCenterY();				s.rotateToPlanet();			}		}				if(!s.updateVelocity(delta)) {			if(systemFocus == -1) {				for(SystemHolder sh : systems) {					sh.move(Ship.velx, Ship.vely, delta);				}			} else {				systems[systemFocus].moveSystem(Ship.velx, Ship.vely, delta);			}		}				if(warpOn != -1) {			if(!systems[warpOn].bounds.contains((float)Ship.locx, (float)Ship.locy)) {				warpOn = -1;			}			if(input.isKeyDown(Input.KEY_E)) {				systemFocus = warpOn; 				planetStr = "" + systems[warpOn].system.planets.length;				warpOn = -1;			}		}						if(systemFocus == -1) {			if(warpOn == -1) {				for(int i = 0; i != systems.length; i++) {					if(systems[i].bounds.contains((float)Ship.locx, (float)Ship.locy)) {						systems[i].hit();						warpOn = i;						break;					}				}			}		} else {			systems[systemFocus].system.update(delta, input, s); 		}				if(Grid.hackView) {			if(input.getMouseX() > menuClip.getMaxX()) {				Ship.grid.hackInteract(input);			}		}				reticule.update(delta);				//System.out.println(System.nanoTime() - start);
	}
	
	public void mouseDragged(int oldx, int oldy, int newx, int newy) {		Ship.grid.playFocus = new Point(-1, -1);		Input input = gcBig.getInput();				if(editClip.contains(newx, newy)) {			if(Mouse.isButtonDown(2)) {				Point offset = new Point(Grid.x + (newx-oldx), Grid.y + (newy-oldy));				Grid.x = offset.getX(); Grid.y = offset.getY();				for(Crew c : Grid.crew) {					if(c != null) {						c.locx += newx-oldx;						c.locy += newy-oldy;					}				}				Ship.grid.relocateProjectiles(oldx, oldy, newx, newy);				Ship.grid.relocateExplosions();			}						if(Mouse.isButtonDown(0)) {				if(!Grid.hackView) {					Ship.grid.boxCreate(startx, starty, newx, newy, oldx, oldy);				}			} else {				Ship.grid.selectBox = null;			}		} else if(worldClip.contains(newx, newy) && input.isMouseButtonDown(0)) {			if(systemFocus != -1) {				for(int i = 0; i != systems[systemFocus].system.attackBots.length; i++) {					if(systems[systemFocus].system.attackBots[i] != null) {						if(systems[systemFocus].system.attackBots[i].bounds.contains((float)newx, (float)newy)) {							if(!systems[systemFocus].system.attackBots[i].targeted) {								for(int j = 0; j != Ship.targets.length; j++) {									if(Ship.targets[j] == -1) {										Ship.targets[j] = i+10000;										systems[systemFocus].system.attackBots[i].targeted = true;										break;									}								}							}						}					}				}				for(int i = 0; i != systems[systemFocus].system.bots.length; i++) {					if(systems[systemFocus].system.bots[i] != null) {						if(systems[systemFocus].system.bots[i].bounds.contains((float)newx, (float)newy)) {							if(!systems[systemFocus].system.bots[i].targeted) {								for(int j = 0; j != Ship.targets.length; j++) {									if(Ship.targets[j] == -1) {										Ship.targets[j] = i;										systems[systemFocus].system.bots[i].targeted = true;										break;									}								}							}						}					}				}			}										} else if(menuLocked) {			double xdiff = Ship.locx;						menuClip.setBounds(newx-25, 0, 50, gcBig.getHeight());			worldClip.setBounds(0, 0, menuClip.getX(), gcBig.getHeight());			editClip.setBounds(menuClip.getX()+menuClip.getWidth(), 0, 					gcBig.getWidth()-menuClip.getMinX()+menuClip.getWidth(), gcBig.getHeight());			moonClip.setBounds(0, 0,  menuClip.getX(), gcBig.getHeight()); moonClip.grow(200, 200);			moonClip.setCenterX(worldClip.getCenterX()); moonClip.setCenterY(worldClip.getCenterY());			 			Ship.locx = worldClip.getCenterX(); Ship.locy = worldClip.getCenterY();			Ship.shieldBubble.setCenterX(worldClip.getCenterX());			Ship.shieldBubble.setCenterY(worldClip.getCenterY());			xdiff -= Ship.locx;						if(systemFocus == -1) {				for(SystemHolder sh : systems) {					sh.menuMove(xdiff, Ship.vely);				}			} else {				systems[systemFocus].system.menuMove(xdiff, Ship.vely);			}						for(int i = 0; i != 5; i++) {				buffons[i] = new Buffon((int)menuClip.getX()+i*10, 0, buffonImages[i].getWidth(), 								buffonImages[i].getHeight(), buffonImages[i], "" + i);			}			for(int i = 5; i != 10; i++) {				buffons[i] = new Buffon((int)menuClip.getX()+(i-5)*10, 10, buffonImages[i].getWidth(), 								buffonImages[i].getHeight(), buffonImages[i], "" + i);			}		}					}		public void mouseMoved(int oldx, int oldy, int newx, int newy) {		if(editClip.contains(oldx, oldy)) {			boolean actionTaken = false;			if(newx > Grid.x && newx < Grid.x + Grid.width) {				if(newy > Grid.y && newy < Grid.y + Grid.height) {					Ship.grid.hoverTile(newx, newy, true);					Grid.hackHover(newx, newy);					actionTaken = true;				}			}						if(!actionTaken) {				Ship.grid.playFocus = new Point(-1, -1);			}		}				if(menuClip.contains(newx, newy)) {			for(int i = 0; i != buffons.length; i++) {				if(buffons[i] != null) {					buffons[i].hover(newx, newy);				}			}		}			}		public void mousePressed(int button, int x, int y) {		startx = x;		starty = y;				Input input = gcBig.getInput();		if(editClip.contains(x, y)) {			if(Mouse.isButtonDown(0)) {				if(x > Grid.x && x < Grid.x + Grid.width) {					if(y > Grid.y && y < Grid.y + Grid.height) {						Ship.grid.select(x, y, input);						Ship.grid.hoverTile(x, y, true);					}				}			}						if(Mouse.isButtonDown(1)) {				if(x > Grid.x && x < Grid.x + Grid.width) {					if(y > Grid.y && y < Grid.y + Grid.height) {						Ship.grid.destinate(x, y, input);						Ship.grid.hoverTile(x, y, true);					}				}			}		}						if(menuClip.contains(x, y)) {			if(button == 2) {				menuLocked = true;			}		}	}		public void mouseReleased(int button, int x, int y)  {		if(button == 0) {			if(Ship.grid.selectBox != null) {				Ship.grid.fireBoxSelect();				Ship.grid.selectBox = null;			}					}				if(button == 2) {			menuLocked = false;		}					}		public void mouseWheelMoved(int change) {		Input input = gcBig.getInput();		int x = input.getMouseX();		int y = input.getMouseY();				if(editClip.contains(x, y)) {			change /= 120;			if(EditMode.zoom + change >= 1 && EditMode.zoom + change < 4) {				EditMode.zoom += change;				Ship.grid.zoomChange(EditMode.zoom, x , y);			}		}	}		public void keyPressed(int key, char c) {		if(key == 34) {			if(systemFocus != -1) {				Random gen = new Random();				Ship.locx = systems[systemFocus].locx + gen.nextInt(10)-5;				Ship.locy = systems[systemFocus].locy + gen.nextInt(10)-5;				systemFocus = -1;				Ship.planetLocked = -1;			}		}		if(key == 35) {			for(int i = 0; i != systems.length; i++) {				if(worldClip.contains((float)systems[i].locx, (float)systems[i].locy)) {					systems[i].hit();					//System.out.println(systems[i].system.planets.length);				}							}					}		if(key == 36) {			try {				Save ass = new Save(0);			} catch (FileNotFoundException e) {} catch (UnsupportedEncodingException e) {}		}				if(key == 37) {			Save.load(0);			firstRun = true;			bigsbg.enterState(0);			Ship.grid.playFocus = new Point(-1, -1);		}				if(key == 38) {			Grid.fullAutoHack();		}	}		public void buffonHit(String a, Input input) {		if(a != null) {			if(a.equals("0")) {				if(input.isMouseButtonDown(0)) {					Save.load(0);				} else if(input.isMouseButtonDown(1)) {					try {						Save b = new Save(0);					} catch (Exception ex) {}				}			} else if(a.equals("1")) {				if(input.isMouseButtonDown(0)) {					Save.load(1);				} else if(input.isMouseButtonDown(1)) {					try {						Save b = new Save(1);					} catch (Exception ex) {}				}			} else if(a.equals("2")) {				if(input.isMouseButtonDown(0)) {					Save.load(2);				} else if(input.isMouseButtonDown(1)) {					try {						Save b = new Save(2);					} catch (Exception ex) {}				}			} else if(a.equals("3")) {				if(input.isMouseButtonDown(0)) {					Save.load(3);				} else if(input.isMouseButtonDown(1)) {					try {						Save b = new Save(3);					} catch (Exception ex) {}				}			} else if(a.equals("4")) {				if(input.isMouseButtonDown(0)) {					Save.load(4);				} else if(input.isMouseButtonDown(1)) {					try {						Save b = new Save(4);					} catch (Exception ex) {}				}			} else if(a.equals("5")) {				if(input.isMouseButtonDown(0)) {					Save.load(5);				} else if(input.isMouseButtonDown(1)) {					try {						Save b = new Save(5);					} catch (Exception ex) {}				}			} else if(a.equals("6")) {				if(input.isMouseButtonDown(0)) {					Save.load(6);				} else if(input.isMouseButtonDown(1)) {					try {						Save b = new Save(6);					} catch (Exception ex) {}				}			} else if(a.equals("7")) {				if(input.isMouseButtonDown(0)) {					Save.load(7);				} else if(input.isMouseButtonDown(1)) {					try {						Save b = new Save(7);					} catch (Exception ex) {}				}			} else if(a.equals("8")) {				if(input.isMouseButtonDown(0)) {					Save.load(8);				} else if(input.isMouseButtonDown(1)) {					try {						Save b = new Save(8);					} catch (Exception ex) {}				}			} else if(a.equals("9")) {				if(input.isMouseButtonDown(0)) {					Save.load(9);				} else if(input.isMouseButtonDown(1)) {					try {						Save b = new Save(9);					} catch (Exception ex) {}				}			}		}	}	
	public int getID() {
		return 1;
	}
}


